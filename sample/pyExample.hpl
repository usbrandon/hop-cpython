<?xml version="1.0" encoding="UTF-8"?>
<pipeline>
  <info>
    <name>Py example</name>
    <name_sync_with_filename>N</name_sync_with_filename>
    <description/>
    <extended_description/>
    <pipeline_version/>
    <pipeline_type>Normal</pipeline_type>
    <pipeline_status>0</pipeline_status>
    <parameters>
    </parameters>
    <capture_transform_performance>N</capture_transform_performance>
    <transform_performance_capturing_delay>1000</transform_performance_capturing_delay>
    <transform_performance_capturing_size_limit/>
    <created_user>-</created_user>
    <created_date>2015/07/02 09:49:17.731</created_date>
    <modified_user>-</modified_user>
    <modified_date>2015/07/02 09:49:17.731</modified_date>
  </info>
  <notepads>
    <notepad>
      <backgroundcolorblue>112</backgroundcolorblue>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorred>255</backgroundcolorred>
      <bordercolorblue>100</bordercolorblue>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorred>100</bordercolorred>
      <fontbold>N</fontbold>
      <fontcolorblue>0</fontcolorblue>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorred>0</fontcolorred>
      <fontitalic>N</fontitalic>
      <fontname>Arial</fontname>
      <fontsize>12</fontsize>
      <height>46</height>
      <xloc>1088</xloc>
      <yloc>32</yloc>
      <note>Compute quartiles for columns
in iris data</note>
      <width>220</width>
    </notepad>
    <notepad>
      <backgroundcolorblue>112</backgroundcolorblue>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorred>255</backgroundcolorred>
      <bordercolorblue>100</bordercolorblue>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorred>100</bordercolorred>
      <fontbold>N</fontbold>
      <fontcolorblue>0</fontcolorblue>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorred>0</fontcolorred>
      <fontitalic>N</fontitalic>
      <fontname>Arial</fontname>
      <fontsize>12</fontsize>
      <height>82</height>
      <xloc>816</xloc>
      <yloc>128</yloc>
      <note>The goal of this code is to reduce the dimensionality of the Iris dataset
while preserving as much variance (information) as possible.
It does this by applying PCA to the four numerical features 
(sepal length, sepal width, petal length, petal width) of the Iris dataset.</note>
      <width>490</width>
    </notepad>
    <notepad>
      <backgroundcolorblue>112</backgroundcolorblue>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorred>255</backgroundcolorred>
      <bordercolorblue>100</bordercolorblue>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorred>100</bordercolorred>
      <fontbold>N</fontbold>
      <fontcolorblue>0</fontcolorblue>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorred>0</fontcolorred>
      <fontitalic>N</fontitalic>
      <fontname>Arial</fontname>
      <fontsize>12</fontsize>
      <height>136</height>
      <xloc>496</xloc>
      <yloc>224</yloc>
      <note>Create a bunch of visualizations
of the iris data:

scatter plot with densities
parallel coordinates
andrew's curves
radvis</note>
      <width>229</width>
    </notepad>
    <notepad>
      <backgroundcolorblue>112</backgroundcolorblue>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorred>255</backgroundcolorred>
      <bordercolorblue>100</bordercolorblue>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorred>100</bordercolorred>
      <fontbold>N</fontbold>
      <fontcolorblue>0</fontcolorblue>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorred>0</fontcolorred>
      <fontitalic>N</fontitalic>
      <fontname>Arial</fontname>
      <fontsize>12</fontsize>
      <height>46</height>
      <xloc>832</xloc>
      <yloc>272</yloc>
      <note>Save visualizations to ${Internal.Tranformation.Filename.Directory}
as png files.</note>
      <width>467</width>
    </notepad>
    <notepad>
      <backgroundcolorblue>112</backgroundcolorblue>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorred>255</backgroundcolorred>
      <bordercolorblue>100</bordercolorblue>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorred>100</bordercolorred>
      <fontbold>N</fontbold>
      <fontcolorblue>0</fontcolorblue>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorred>0</fontcolorred>
      <fontitalic>N</fontitalic>
      <fontname>Arial</fontname>
      <fontsize>12</fontsize>
      <height>64</height>
      <xloc>144</xloc>
      <yloc>464</yloc>
      <note>Randomly shuffle data,
train an sklearn decision tree
and save the model</note>
      <width>209</width>
    </notepad>
    <notepad>
      <backgroundcolorblue>112</backgroundcolorblue>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorred>255</backgroundcolorred>
      <bordercolorblue>100</bordercolorblue>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorred>100</bordercolorred>
      <fontbold>N</fontbold>
      <fontcolorblue>0</fontcolorblue>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorred>0</fontcolorred>
      <fontitalic>N</fontitalic>
      <fontname>Arial</fontname>
      <fontsize>12</fontsize>
      <height>46</height>
      <xloc>832</xloc>
      <yloc>464</yloc>
      <note>Load the model from the previous
step and score the incoming data</note>
      <width>241</width>
    </notepad>
  </notepads>
  <order>
    <hop>
      <from>iris.csv</from>
      <to>Compute quartiles for columns in iris data [sepal length, sepal width, petal length, petal width]</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>iris.csv</from>
      <to>PCA on Iris dataset (sepal length and width, petal length and width)</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>iris.csv</from>
      <to>Create scatter plot, Andrew's curves, Parallel coordinates, and RadViz</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Create scatter plot, Andrew's curves, Parallel coordinates, and RadViz</from>
      <to>JavaScript - Save visualizations as PNG files</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Random Shuffle, Train Decision Tree, and output model</from>
      <to>Load previously trained decision tree model and score incoming rows</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>iris.csv</from>
      <to>Random Shuffle, Train Decision Tree, and output model</to>
      <enabled>Y</enabled>
    </hop>
  </order>
  <transform>
    <name>Compute quartiles for columns in iris data [sepal length, sepal width, petal length, petal width]</name>
    <type>CPythonScriptExecutor</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <python_command/>
    <python_path_entries/>
    <python_server_id/>
    <rows_to_process>ALL</rows_to_process>
    <rows_to_process_size/>
    <reservoir_sampling>N</reservoir_sampling>
    <reservoir_sampling_size/>
    <reservoir_sampling_seed>1</reservoir_sampling_seed>
    <include_input_as_output>N</include_input_as_output>
    <py_script># Python script
from pandas import DataFrame
quant = iris[['sepallength', 'sepalwidth', 'petallength', 'petalwidth']].quantile([0.25,0.5,0.75])
print(iris.head())


</py_script>
    <load_script_at_runtime>N</load_script_at_runtime>
    <script_to_load/>
    <continue_on_unset_vars>N</continue_on_unset_vars>
    <py_vars_to_get>quant</py_vars_to_get>
    <include_frame_row_index>Y</include_frame_row_index>
    <frame_names>
      <frame_name0>iris</frame_name0>
    </frame_names>
    <incoming_step_names>
      <step_name0>iris.csv</step_name0>
    </incoming_step_names>
    <output_fields>
      <output_field>
        <field_name>index</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>sepallength</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>sepalwidth</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>petallength</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>petalwidth</field_name>
        <type>Number</type>
      </output_field>
    </output_fields>
    <attributes/>
    <GUI>
      <xloc>656</xloc>
      <yloc>32</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Create scatter plot, Andrew's curves, Parallel coordinates, and RadViz</name>
    <type>CPythonScriptExecutor</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <python_command/>
    <python_path_entries/>
    <python_server_id/>
    <rows_to_process>ALL</rows_to_process>
    <rows_to_process_size/>
    <reservoir_sampling>N</reservoir_sampling>
    <reservoir_sampling_size/>
    <reservoir_sampling_seed>1</reservoir_sampling_seed>
    <include_input_as_output>N</include_input_as_output>
    <py_script>import matplotlib.pyplot as plt
from pandas.plotting import scatter_matrix
from pandas.plotting import andrews_curves
from pandas.plotting import parallel_coordinates
from pandas.plotting import radviz
import numpy as np

iris=py_data
# Summarize the input data
summary=str(iris.describe(include='all'))
# Scatter plot
scatter = scatter_matrix(iris,figsize=(6,6),diagonal='kde')
fig=scatter[0][0].get_figure()
# Andrew's curves
fig2=plt.figure()
andrews_curves(iris, 'class')
# Parallel coordinates
fig3=plt.figure()
parallel_coordinates(iris, 'class')
# RadViz
fig4=plt.figure()
radviz(iris, 'class')

</py_script>
    <load_script_at_runtime>N</load_script_at_runtime>
    <script_to_load/>
    <continue_on_unset_vars>N</continue_on_unset_vars>
    <py_vars_to_get>fig,fig2,fig3,fig4</py_vars_to_get>
    <include_frame_row_index>N</include_frame_row_index>
    <frame_names>
      <frame_name0>py_data</frame_name0>
    </frame_names>
    <incoming_step_names>
      <step_name0>iris.csv</step_name0>
    </incoming_step_names>
    <output_fields>
      <output_field>
        <field_name>fig</field_name>
        <type>Serializable</type>
      </output_field>
      <output_field>
        <field_name>fig2</field_name>
        <type>Serializable</type>
      </output_field>
      <output_field>
        <field_name>fig3</field_name>
        <type>Serializable</type>
      </output_field>
      <output_field>
        <field_name>fig4</field_name>
        <type>Serializable</type>
      </output_field>
    </output_fields>
    <attributes/>
    <GUI>
      <xloc>496</xloc>
      <yloc>384</yloc>
    </GUI>
  </transform>
  <transform>
    <name>JavaScript - Save visualizations as PNG files</name>
    <type>ScriptValueMod</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <optimizationLevel>9</optimizationLevel>
    <jsScripts>
      <jsScript>
        <jsScript_type>0</jsScript_type>
        <jsScript_name>Script 1</jsScript_name>
        <jsScript_script>var File = java.io.File;
var FileOutputStream = java.io.FileOutputStream;
var ImageIO = javax.imageio.ImageIO

var filePrefix = substr(getVariable('Internal.Entry.Current.Folder',''), 7);

var image1path = filePrefix + File.separator + 'pic1.png';
var image2path = filePrefix + File.separator + 'pic2.png';
var image3path = filePrefix + File.separator + 'pic3.png';
var image4path = filePrefix + File.separator + 'pic4.png';

ImageIO.write(fig,'png',new File(image1path));
ImageIO.write(fig2,'png', new File(image2path));
ImageIO.write(fig3,'png',new File(image3path));
ImageIO.write(fig4,'png',new File(image4path));
</jsScript_script>
      </jsScript>
    </jsScripts>
    <fields>    </fields>
    <attributes/>
    <GUI>
      <xloc>1120</xloc>
      <yloc>384</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Load previously trained decision tree model and score incoming rows</name>
    <type>CPythonScriptExecutor</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <python_command/>
    <python_path_entries/>
    <python_server_id/>
    <rows_to_process>ALL</rows_to_process>
    <rows_to_process_size/>
    <reservoir_sampling>N</reservoir_sampling>
    <reservoir_sampling_size/>
    <reservoir_sampling_seed>1</reservoir_sampling_seed>
    <include_input_as_output>Y</include_input_as_output>
    <py_script># Python script
from sklearn import *
from pandas import DataFrame
import numpy as np
import joblib
import os

# load the model...
filename='${Internal.Entry.Current.Folder}/dt.sklearn'
if os.name == 'nt':
	filename=filename[8:] # strip the file:/// off
else:
	filename=filename[7:] # strip the "file://" off
dt = joblib.load(filename)

# predict the incoming data (we only need the input columns, not the target)
X=test_data.iloc[:,[0,1,2,3]].values
preds = dt.predict_proba(X)

p = DataFrame(preds, columns=['predicted_class_Iris-setosa','predicted_class_Iris-versicolor','predicted_class_Iris-virginica'])
</py_script>
    <load_script_at_runtime>N</load_script_at_runtime>
    <script_to_load/>
    <continue_on_unset_vars>N</continue_on_unset_vars>
    <py_vars_to_get>p</py_vars_to_get>
    <include_frame_row_index>N</include_frame_row_index>
    <frame_names>
      <frame_name0>test_data</frame_name0>
    </frame_names>
    <incoming_step_names>
      <step_name0>Random Shuffle, Train Decision Tree, and output model</step_name0>
    </incoming_step_names>
    <output_fields>
      <output_field>
        <field_name>sepallength</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>sepalwidth</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>petallength</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>petalwidth</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>class</field_name>
        <type>String</type>
      </output_field>
      <output_field>
        <field_name>predicted_class_Iris-setosa</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>predicted_class_Iris-versicolor</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>predicted_class_Iris-virginica</field_name>
        <type>Number</type>
      </output_field>
    </output_fields>
    <attributes/>
    <GUI>
      <xloc>944</xloc>
      <yloc>528</yloc>
    </GUI>
  </transform>
  <transform>
    <name>PCA on Iris dataset (sepal length and width, petal length and width)</name>
    <type>CPythonScriptExecutor</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <python_command/>
    <python_path_entries/>
    <python_server_id/>
    <rows_to_process>ALL</rows_to_process>
    <rows_to_process_size/>
    <reservoir_sampling>N</reservoir_sampling>
    <reservoir_sampling_size/>
    <reservoir_sampling_seed>1</reservoir_sampling_seed>
    <include_input_as_output>N</include_input_as_output>
    <py_script># Python script: PCA on Iris dataset
from sklearn import datasets
from pandas import DataFrame
import sklearn.decomposition as deco
import numpy as np

# Load the Iris dataset into a pandas DataFrame (assumed to be done before this)
# iris2 = DataFrame(datasets.load_iris().data, columns=datasets.load_iris().feature_names)

# Extract the first 4 feature columns: sepal length, sepal width, petal length, petal width
X = iris2.iloc[:, [0, 1, 2, 3]].values  # Converts to NumPy array for PCA

# Initialize PCA with 4 components (same as the number of features)
# This allows analysis of how variance is distributed across components
pca = deco.PCA(4)

# Fit the PCA model on X and transform the data into the principal component space
# Each new component is a linear combination of the original features
x_r = pca.fit(X).transform(X)

# Wrap the transformed data into a DataFrame for easier analysis or visualization
pdf = DataFrame(x_r)

# Optional:
# You can view the explained variance ratio to understand how much variance each component captures
# print(pca.explained_variance_ratio_)

# This script is useful for:
# 1. Exploring how the data can be expressed with fewer dimensions
# 2. Understanding which directions in the feature space capture most variance
# 3. Preparing for dimensionality reduction or visualization in 2D/3D
</py_script>
    <load_script_at_runtime>N</load_script_at_runtime>
    <script_to_load/>
    <continue_on_unset_vars>N</continue_on_unset_vars>
    <py_vars_to_get>pdf</py_vars_to_get>
    <include_frame_row_index>N</include_frame_row_index>
    <frame_names>
      <frame_name0>iris2</frame_name0>
    </frame_names>
    <incoming_step_names>
      <step_name0>iris.csv</step_name0>
    </incoming_step_names>
    <output_fields>
      <output_field>
        <field_name>0</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>1</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>2</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>3</field_name>
        <type>Number</type>
      </output_field>
    </output_fields>
    <attributes/>
    <GUI>
      <xloc>544</xloc>
      <yloc>144</yloc>
    </GUI>
  </transform>
  <transform>
    <name>Random Shuffle, Train Decision Tree, and output model</name>
    <type>CPythonScriptExecutor</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <python_command/>
    <python_path_entries/>
    <python_server_id/>
    <rows_to_process>ALL</rows_to_process>
    <rows_to_process_size/>
    <reservoir_sampling>N</reservoir_sampling>
    <reservoir_sampling_size/>
    <reservoir_sampling_seed>1</reservoir_sampling_seed>
    <include_input_as_output>N</include_input_as_output>
    <py_script># learn a scikit-learn classifier
from sklearn import *
from pandas import DataFrame
import numpy as np
import joblib
import os

# randomly shuffle the rows of the dataframe 
py_data=py_data.reindex(np.random.permutation(py_data.index))

# extract training columns and class column
X=py_data.iloc[:,[0,1,2,3]].values
Y=py_data.iloc[:,[4]].values

# build a decision tree
dt=tree.DecisionTreeClassifier()
dt.fit(X,Y)

# save the model
filename='${Internal.Entry.Current.Folder}/dt.sklearn'
if os.name == 'nt':
	filename=filename[8:] # strip file:/// off
else:
	filename=filename[7:] # strip the "file://" off (probably needs changing for windows paths...)
joblib.dump(dt,filename)
</py_script>
    <load_script_at_runtime>N</load_script_at_runtime>
    <script_to_load/>
    <continue_on_unset_vars>N</continue_on_unset_vars>
    <py_vars_to_get>py_data</py_vars_to_get>
    <include_frame_row_index>N</include_frame_row_index>
    <frame_names>
      <frame_name0>py_data</frame_name0>
    </frame_names>
    <incoming_step_names>
      <step_name0>iris.csv</step_name0>
    </incoming_step_names>
    <output_fields>
      <output_field>
        <field_name>sepallength</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>sepalwidth</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>petallength</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>petalwidth</field_name>
        <type>Number</type>
      </output_field>
      <output_field>
        <field_name>class</field_name>
        <type>String</type>
      </output_field>
    </output_fields>
    <attributes/>
    <GUI>
      <xloc>80</xloc>
      <yloc>528</yloc>
    </GUI>
  </transform>
  <transform>
    <name>iris.csv</name>
    <type>CSVInput</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <filename>${Internal.Entry.Current.Folder}/iris.csv</filename>
    <filename_field/>
    <rownum_field/>
    <include_filename>N</include_filename>
    <separator>,</separator>
    <enclosure>"</enclosure>
    <header>Y</header>
    <buffer_size>50000</buffer_size>
    <schemaDefinition/>
    <lazy_conversion>N</lazy_conversion>
    <add_filename_result>N</add_filename_result>
    <parallel>N</parallel>
    <newline_possible>N</newline_possible>
    <encoding/>
    <fields>
      <field>
        <name>sepallength</name>
        <type>Number</type>
        <format>#.#</format>
        <currency>$</currency>
        <decimal>.</decimal>
        <group>,</group>
        <length>15</length>
        <precision>1</precision>
        <trim_type>none</trim_type>
      </field>
      <field>
        <name>sepalwidth</name>
        <type>Number</type>
        <format>#.#</format>
        <currency>$</currency>
        <decimal>.</decimal>
        <group>,</group>
        <length>15</length>
        <precision>1</precision>
        <trim_type>none</trim_type>
      </field>
      <field>
        <name>petallength</name>
        <type>Number</type>
        <format>#.#</format>
        <currency>$</currency>
        <decimal>.</decimal>
        <group>,</group>
        <length>15</length>
        <precision>1</precision>
        <trim_type>none</trim_type>
      </field>
      <field>
        <name>petalwidth</name>
        <type>Number</type>
        <format>#.#</format>
        <currency>$</currency>
        <decimal>.</decimal>
        <group>,</group>
        <length>15</length>
        <precision>1</precision>
        <trim_type>none</trim_type>
      </field>
      <field>
        <name>class</name>
        <type>String</type>
        <format/>
        <currency>$</currency>
        <decimal>.</decimal>
        <group>,</group>
        <length>15</length>
        <precision>-1</precision>
        <trim_type>none</trim_type>
      </field>
    </fields>
    <attributes/>
    <GUI>
      <xloc>80</xloc>
      <yloc>32</yloc>
    </GUI>
  </transform>
  <transform_error_handling>
  </transform_error_handling>
  <attributes/>
</pipeline>
